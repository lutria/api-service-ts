// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String  @unique
  privileged Boolean @default(false)
}

// model Route {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   provider     Provider    @relation(fields: [providerId], references: [id])
//   providerId   String      @db.ObjectId
// }

model Source {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  security    DataSecurity
  name        String       @unique
  displayName String       @unique
  streams     Stream[]
  // Processing timestamps
  createdAt   DateTime     @default(now())
}

model Stream {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  security     DataSecurity
  // Current state of this Stream
  state        StreamState   @default(UNSCANNED)
  name         String        @unique
  displayName  String
  // Relation to parent Source
  source       Source        @relation(fields: [sourceId], references: [id])
  sourceId     String        @db.ObjectId
  // Source-specific type that this Stream represents
  externalType String?
  // Source-specific identifier that this Stream relates to
  externalId   String
  // Indicates whether this Stream has been deleted in the system
  deleted      Boolean       @default(false)
  // Indicates whether this Stream should be scanned
  enabled      Boolean       @default(true)
  // externalRef of the most recently seen ContentItem
  scanCursor   String?
  // Relation to child ContentItems
  contentItems ContentItem[]
  // Processing timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  scannedAt    DateTime?
}

model ContentItem {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  security        DataSecurity
  // Current state of this ContentItem
  state           ContentItemState @default(SCANNED)
  name            String
  description     String?
  durationSeconds Int?
  publishedAt     DateTime?
  // Relation to parent Stream
  stream          Stream           @relation(fields: [streamId], references: [id])
  streamId        String           @db.ObjectId
  // External reference, e.g. remote URL or ID
  externalRef     String
  // Relation to child PreviewAssets
  previewAssets   PreviewAsset[]
  // Processing timestamps
  scannedAt       DateTime         @default(now())
  reviewedAt      DateTime?
  fetchedAt       DateTime?
}

type DataSecurity {
  protected Boolean @default(false)
}

type PreviewAsset {
  type        PreviewAssetType
  // Current state of this PreviewAsset
  state       PreviewAssetState @default(SCANNED)
  // External reference, e.g. remote URL
  externalRef String
  // Internal reference, e.g. path to asset in storage
  internalRef String?
  // Processing timestamps
  scannedAt   DateTime          @default(now())
  fetchedAt   DateTime?
}

enum PreviewAssetType {
  IMAGE
  VIDEO
}

enum ContentItemState {
  SCANNED
  FETCH_APPROVED
  FECTH_QUEUED
  FETCH_IN_PROGRESS
  FETCH_COMPLETE
  FETCH_FAILED
  // TODO: Maybe add more states relating to publishing?
}

enum PreviewAssetState {
  SCANNED
  FETCH_QUEUED
  FETCH_IN_PROGRESS
  FETCH_COMPLETE
  FETCH_FAILED
}

enum StreamState {
  UNSCANNED
  SCAN_REQUESTED
  SCAN_QUEUED
  SCAN_IN_PROGRESS
  SCAN_COMPLETE
  SCAN_FAILED
}
